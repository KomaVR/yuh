name: üöÄ Distributed Locust Load Test

on:
  workflow_dispatch:
    inputs:
      HOST:
        description: 'Target base URL for Locust (e.g. https://example.com)'
        required: true
      USERS:
        description: 'Total virtual users'
        required: true
      SPAWN_RATE:
        description: 'Users spawned per second'
        required: true
      WORKERS:
        description: 'Number of worker processes'
        required: true
      RUN_TIME:
        description: 'Duration (e.g. 5m, 1h)'
        required: true

jobs:
  locust-swarm:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install Locust
        run: pip install locust

      - name: üî• Launch master + workers
        env:
          HOST: ${{ github.event.inputs.HOST }}
          USERS: ${{ github.event.inputs.USERS }}
          SPAWN_RATE: ${{ github.event.inputs.SPAWN_RATE }}
          WORKERS: ${{ github.event.inputs.WORKERS }}
          RUN_TIME: ${{ github.event.inputs.RUN_TIME }}
        run: |
          # total nodes = 1 master + WORKERS
          TOTAL=$((WORKERS + 1))

          # 1) Start master, expecting TOTAL participants
          locust -f stress_test.py \
            --master \
            --expect-workers "${TOTAL}" \
            --headless \
            --host "${HOST}" \
            --users "${USERS}" \
            --spawn-rate "${SPAWN_RATE}" \
            --run-time "${RUN_TIME}" &
          MASTER_PID=$!

          # 2) Give the master time to bind its socket
          sleep 10

          # 3) Fire up each worker in the background
          for i in $(seq 1 "${WORKERS}"); do
            locust -f stress_test.py --worker --master-host 127.0.0.1 &
          done

          # 4) Wait for the entire swarm to finish
          wait $MASTER_PID
